import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2


mnist = tf.keras.datasets.mnist


(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = tf.keras.utils.normalize(X_train, axis=1)
X_test = tf.keras.utils.normalize(X_test, axis=1)



model = tf.keras.models.Sequential()


model.add(tf.keras.layers.Flatten(input_shape=(28, 28)))
model.add(tf.keras.layers.Dense(units=128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(units=128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(units=10, activation=tf.nn.softmax))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=3)


model.save('handwritten.model')

model = tf.keras.models.load_model('handwritten.model')
loss, accuracy = model.evaluate(X_test, y_test)

print(loss)
print(accuracy)

# image_number = 1
# while os.path.isfile('digits/digit{}.png'.format(image_number)):
image_number=2


try:
    img = cv2.imread('/digit{}.png'.format(image_number))[:, :, 0]
    img = np.invert(np.array([img]))
    prediction = model.predict(img)
    print("The number is probably a {}".format(np.argmax(prediction)))
    plt.imshow(img[0], cmap=plt.cm.binary)
    plt.show()
except:
    print("Error reading image! Proceeding to the next one...")
